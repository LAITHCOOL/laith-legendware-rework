#pragma once
#include "../../includes.hpp"
enum Exploit : int
{
	NoExploit = 0,
	DoubleTap = 1,
	HideShots = 2
};
class C_Exploits
{
public:
	virtual void SetupExploits();
	virtual bool RunExploits();
	virtual void BeforeRageBot();
	virtual void PostRageBot();
	virtual void OnMovePacket(float flFrameTime);
	virtual bool IsRecharging();
	virtual bool IsInDefensive() { return m_Data.m_bDefensiveStarted; };
	virtual void OnFakeDuck();
	virtual bool WriteUsercmdDeltaToBuffer(bf_write* lpBuffer, int nSlot, int nFrom, int nTo, bool bIsNewCmd);
	virtual void WriteUsercmd(bf_write* lpBuffer, CUserCmd* pToCmd, CUserCmd* pFromCmd);
	virtual void OnTickBaseProxy(int nTickBase);
	virtual void ResetData();
	virtual int GetPredictedTickBase();
#ifdef OVERSEE_DEV
	virtual void DebugDrawData();
#endif
private:
	struct
	{
		int m_nSimulationTicks = 0;
		int m_nPerspectiveShift = 0;
		int m_nSent = 0, m_nNetworked = 0, m_nTickBase = 0;
		int m_nShift = 0;
		int m_nTicksAllowed = 1;
		int m_nActiveExploit = 0;
		int m_nFirstShift = 0;
		int m_nDefensiveTick = 0;
		int m_nShiftTick = 0;

		bool m_bDueToFakeDuck = false;
		bool m_bDefensiveStarted = false;
		bool m_bDefensive = false;
		bool m_bUseCLMove = false;
		bool m_bReCharging = false;
		bool m_bInReset = false;
		bool m_bFirstTick = false;
		bool m_bRunAlternativeCreateMove = false;
	} m_Data;
};

inline C_Exploits* g_Exploits = new C_Exploits();